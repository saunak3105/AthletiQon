{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nAthletiQon is a comprehensive athletic performance tracking and analysis platform built as a full-stack web application. The system allows athletes to record fitness test results, track performance progress over time, compete on leaderboards, and view detailed analytics. The application features user authentication via Replit Auth, a modern React frontend with shadcn/ui components, and a robust Express.js backend with PostgreSQL database integration.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n\n**Framework**: React with TypeScript and Vite for build tooling\n- **UI Library**: shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with CSS custom properties for theming\n- **State Management**: TanStack Query for server state and data fetching\n- **Routing**: Wouter for lightweight client-side routing\n- **Forms**: React Hook Form with Zod validation resolvers\n\n**Key Design Decisions**:\n- Component-based architecture with reusable UI components\n- Responsive design with mobile-first approach and dedicated mobile navigation\n- Dark theme optimized for sports/fitness aesthetics\n- Real-time data updates via query invalidation patterns\n\n## Backend Architecture\n\n**Framework**: Express.js with TypeScript\n- **Database ORM**: Drizzle ORM with PostgreSQL\n- **Authentication**: Passport.js with OpenID Connect (Replit Auth)\n- **Session Management**: Express sessions with PostgreSQL storage\n- **API Design**: RESTful endpoints with consistent error handling\n\n**Key Design Decisions**:\n- Middleware-based request processing with logging and error handling\n- Type-safe database operations using Drizzle schema definitions\n- Centralized storage abstraction layer for database operations\n- Session-based authentication with cookie security for production\n\n## Data Storage Architecture\n\n**Database**: PostgreSQL with Neon serverless connection pooling\n- **Schema Management**: Drizzle migrations with schema definitions in shared directory\n- **Data Models**: Users, athlete profiles, test types, test results, achievements, and user achievements\n- **Relationships**: Foreign key constraints with cascade deletions for data integrity\n\n**Key Design Decisions**:\n- Normalized schema design with proper relational structure\n- UUID primary keys for scalability and security\n- JSON fields for flexible session storage\n- Indexes on frequently queried columns (sessions expire field)\n\n## Authentication System\n\n**Strategy**: OpenID Connect via Replit's identity provider\n- **User Management**: Automatic user creation/update on successful authentication\n- **Authorization**: Route-level middleware protection for authenticated endpoints\n- **Session Security**: HTTP-only cookies with secure flags and TTL expiration\n\n**Key Design Decisions**:\n- Stateful session management for better security vs stateless JWT\n- Automatic user profile synchronization from identity provider\n- Graceful handling of authentication failures with redirect flows\n\n## API Structure\n\n**Endpoints**:\n- `/api/auth/*` - Authentication and user management\n- `/api/athlete-profile` - Athlete profile CRUD operations\n- `/api/test-types` - Test type management and retrieval\n- `/api/test-results` - Test result recording and analytics\n- `/api/leaderboards/*` - State and national ranking systems\n- `/api/achievements/*` - Achievement system and user progress\n- `/api/analytics` - Performance analytics and trends\n\n**Key Design Decisions**:\n- Consistent JSON responses with error message structure\n- Request/response logging for debugging and monitoring\n- Input validation using Zod schemas shared between client and server\n- Parameterized queries for performance and security\n\n# External Dependencies\n\n## Core Infrastructure\n- **Neon Database**: Serverless PostgreSQL with connection pooling via `@neondatabase/serverless`\n- **Replit Auth**: OpenID Connect authentication provider for user management\n- **WebSocket Support**: Node.js `ws` library for Neon database connections\n\n## UI and Styling\n- **Radix UI**: Headless component primitives for accessible UI components\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens\n- **Lucide React**: Icon library for consistent iconography\n- **Google Fonts**: Web fonts (Inter, DM Sans, Geist Mono, Fira Code)\n\n## Development Tools\n- **TypeScript**: Type safety across frontend and backend\n- **Vite**: Frontend build tool with hot module replacement\n- **ESBuild**: Backend bundling for production deployment\n- **Drizzle Kit**: Database schema management and migrations\n\n## Runtime Libraries\n- **TanStack Query**: Server state management and caching\n- **React Hook Form**: Form handling with validation\n- **Zod**: Schema validation for API contracts\n- **Date-fns**: Date manipulation and formatting utilities\n- **Class Variance Authority**: Component variant management","size_bytes":4910},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { \n  insertAthleteProfileSchema, \n  insertTestResultSchema, \n  insertTestTypeSchema \n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get(\"/api/auth/user\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      const athleteProfile = await storage.getAthleteProfile(userId);\n      \n      res.json({\n        ...user,\n        athleteProfile,\n      });\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Athlete profile routes\n  app.post(\"/api/athlete-profile\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const profileData = insertAthleteProfileSchema.parse({\n        ...req.body,\n        userId,\n      });\n      \n      const profile = await storage.createOrUpdateAthleteProfile(profileData);\n      res.json(profile);\n    } catch (error) {\n      console.error(\"Error creating/updating athlete profile:\", error);\n      res.status(400).json({ message: \"Invalid profile data\" });\n    }\n  });\n\n  app.get(\"/api/athlete-profile\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const profile = await storage.getAthleteProfile(userId);\n      res.json(profile);\n    } catch (error) {\n      console.error(\"Error fetching athlete profile:\", error);\n      res.status(500).json({ message: \"Failed to fetch profile\" });\n    }\n  });\n\n  // Test type routes\n  app.get(\"/api/test-types\", async (req, res) => {\n    try {\n      const testTypes = await storage.getAllTestTypes();\n      res.json(testTypes);\n    } catch (error) {\n      console.error(\"Error fetching test types:\", error);\n      res.status(500).json({ message: \"Failed to fetch test types\" });\n    }\n  });\n\n  app.post(\"/api/test-types\", isAuthenticated, async (req, res) => {\n    try {\n      const testTypeData = insertTestTypeSchema.parse(req.body);\n      const testType = await storage.createTestType(testTypeData);\n      res.json(testType);\n    } catch (error) {\n      console.error(\"Error creating test type:\", error);\n      res.status(400).json({ message: \"Invalid test type data\" });\n    }\n  });\n\n  // Test result routes\n  app.post(\"/api/test-results\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const athleteProfile = await storage.getAthleteProfile(userId);\n      \n      if (!athleteProfile) {\n        return res.status(400).json({ message: \"Athlete profile required\" });\n      }\n\n      const resultData = insertTestResultSchema.parse({\n        ...req.body,\n        athleteId: athleteProfile.id,\n      });\n      \n      const result = await storage.createTestResult(resultData);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error creating test result:\", error);\n      res.status(400).json({ message: \"Invalid test result data\" });\n    }\n  });\n\n  app.get(\"/api/test-results\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const athleteProfile = await storage.getAthleteProfile(userId);\n      \n      if (!athleteProfile) {\n        return res.json([]);\n      }\n\n      const results = await storage.getTestResultsByAthlete(athleteProfile.id);\n      res.json(results);\n    } catch (error) {\n      console.error(\"Error fetching test results:\", error);\n      res.status(500).json({ message: \"Failed to fetch test results\" });\n    }\n  });\n\n  app.get(\"/api/test-results/recent\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const athleteProfile = await storage.getAthleteProfile(userId);\n      \n      if (!athleteProfile) {\n        return res.json([]);\n      }\n\n      const limit = parseInt(req.query.limit as string) || 5;\n      const results = await storage.getRecentTestResults(athleteProfile.id, limit);\n      res.json(results);\n    } catch (error) {\n      console.error(\"Error fetching recent test results:\", error);\n      res.status(500).json({ message: \"Failed to fetch recent test results\" });\n    }\n  });\n\n  // Leaderboard routes\n  app.get(\"/api/leaderboards/state/:state\", async (req, res) => {\n    try {\n      const { state } = req.params;\n      const limit = parseInt(req.query.limit as string) || 50;\n      const leaderboard = await storage.getStateLeaderboard(state, limit);\n      res.json(leaderboard);\n    } catch (error) {\n      console.error(\"Error fetching state leaderboard:\", error);\n      res.status(500).json({ message: \"Failed to fetch state leaderboard\" });\n    }\n  });\n\n  app.get(\"/api/leaderboards/national\", async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 100;\n      const leaderboard = await storage.getNationalLeaderboard(limit);\n      res.json(leaderboard);\n    } catch (error) {\n      console.error(\"Error fetching national leaderboard:\", error);\n      res.status(500).json({ message: \"Failed to fetch national leaderboard\" });\n    }\n  });\n\n  // Achievement routes\n  app.get(\"/api/achievements\", async (req, res) => {\n    try {\n      const achievements = await storage.getAllAchievements();\n      res.json(achievements);\n    } catch (error) {\n      console.error(\"Error fetching achievements:\", error);\n      res.status(500).json({ message: \"Failed to fetch achievements\" });\n    }\n  });\n\n  app.get(\"/api/achievements/user\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const athleteProfile = await storage.getAthleteProfile(userId);\n      \n      if (!athleteProfile) {\n        return res.json([]);\n      }\n\n      const userAchievements = await storage.getUserAchievements(athleteProfile.id);\n      res.json(userAchievements);\n    } catch (error) {\n      console.error(\"Error fetching user achievements:\", error);\n      res.status(500).json({ message: \"Failed to fetch user achievements\" });\n    }\n  });\n\n  // Analytics routes\n  app.get(\"/api/analytics\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const athleteProfile = await storage.getAthleteProfile(userId);\n      \n      if (!athleteProfile) {\n        return res.json({ totalTests: 0, performanceByCategory: {}, recentActivity: [] });\n      }\n\n      const analytics = await storage.getPerformanceAnalytics(athleteProfile.id);\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Error fetching analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch analytics\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":6981},"server/storage.ts":{"content":"import {\n  users,\n  athleteProfiles,\n  testTypes,\n  testResults,\n  achievements,\n  userAchievements,\n  type User,\n  type UpsertUser,\n  type AthleteProfile,\n  type InsertAthleteProfile,\n  type TestType,\n  type InsertTestType,\n  type TestResult,\n  type InsertTestResult,\n  type Achievement,\n  type UserAchievement,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, sql, and, avg } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Athlete profile operations\n  getAthleteProfile(userId: string): Promise<AthleteProfile | undefined>;\n  createOrUpdateAthleteProfile(profile: InsertAthleteProfile): Promise<AthleteProfile>;\n  \n  // Test type operations\n  getAllTestTypes(): Promise<TestType[]>;\n  getTestType(id: string): Promise<TestType | undefined>;\n  createTestType(testType: InsertTestType): Promise<TestType>;\n  \n  // Test result operations\n  createTestResult(result: InsertTestResult): Promise<TestResult>;\n  getTestResultsByAthlete(athleteId: string): Promise<TestResult[]>;\n  getRecentTestResults(athleteId: string, limit?: number): Promise<any[]>;\n  \n  // Leaderboard operations\n  getStateLeaderboard(state: string, limit?: number): Promise<any[]>;\n  getNationalLeaderboard(limit?: number): Promise<any[]>;\n  \n  // Achievement operations\n  getAllAchievements(): Promise<Achievement[]>;\n  getUserAchievements(athleteId: string): Promise<any[]>;\n  unlockAchievement(athleteId: string, achievementId: string): Promise<UserAchievement>;\n  \n  // Analytics operations\n  getPerformanceAnalytics(athleteId: string): Promise<any>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Athlete profile operations\n  async getAthleteProfile(userId: string): Promise<AthleteProfile | undefined> {\n    const [profile] = await db\n      .select()\n      .from(athleteProfiles)\n      .where(eq(athleteProfiles.userId, userId));\n    return profile;\n  }\n\n  async createOrUpdateAthleteProfile(profile: InsertAthleteProfile): Promise<AthleteProfile> {\n    const [existingProfile] = await db\n      .select()\n      .from(athleteProfiles)\n      .where(eq(athleteProfiles.userId, profile.userId));\n\n    if (existingProfile) {\n      const [updatedProfile] = await db\n        .update(athleteProfiles)\n        .set({ ...profile, updatedAt: new Date() })\n        .where(eq(athleteProfiles.id, existingProfile.id))\n        .returning();\n      return updatedProfile;\n    } else {\n      const [newProfile] = await db\n        .insert(athleteProfiles)\n        .values(profile)\n        .returning();\n      return newProfile;\n    }\n  }\n\n  // Test type operations\n  async getAllTestTypes(): Promise<TestType[]> {\n    return await db\n      .select()\n      .from(testTypes)\n      .where(eq(testTypes.isActive, true))\n      .orderBy(testTypes.category, testTypes.name);\n  }\n\n  async getTestType(id: string): Promise<TestType | undefined> {\n    const [testType] = await db\n      .select()\n      .from(testTypes)\n      .where(eq(testTypes.id, id));\n    return testType;\n  }\n\n  async createTestType(testType: InsertTestType): Promise<TestType> {\n    const [newTestType] = await db\n      .insert(testTypes)\n      .values(testType)\n      .returning();\n    return newTestType;\n  }\n\n  // Test result operations\n  async createTestResult(result: InsertTestResult): Promise<TestResult> {\n    const [newResult] = await db\n      .insert(testResults)\n      .values(result)\n      .returning();\n    \n    // Update athlete's overall score\n    await this.updateAthleteOverallScore(result.athleteId);\n    \n    return newResult;\n  }\n\n  async getTestResultsByAthlete(athleteId: string): Promise<TestResult[]> {\n    return await db\n      .select()\n      .from(testResults)\n      .where(eq(testResults.athleteId, athleteId))\n      .orderBy(desc(testResults.createdAt));\n  }\n\n  async getRecentTestResults(athleteId: string, limit: number = 5): Promise<any[]> {\n    return await db\n      .select({\n        id: testResults.id,\n        value: testResults.value,\n        createdAt: testResults.createdAt,\n        testName: testTypes.name,\n        testUnit: testTypes.unit,\n        testCategory: testTypes.category,\n      })\n      .from(testResults)\n      .innerJoin(testTypes, eq(testResults.testTypeId, testTypes.id))\n      .where(eq(testResults.athleteId, athleteId))\n      .orderBy(desc(testResults.createdAt))\n      .limit(limit);\n  }\n\n  // Leaderboard operations\n  async getStateLeaderboard(state: string, limit: number = 50): Promise<any[]> {\n    return await db\n      .select({\n        rank: sql<number>`ROW_NUMBER() OVER (ORDER BY ${athleteProfiles.overallScore} DESC)`,\n        athleteId: athleteProfiles.id,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        score: athleteProfiles.overallScore,\n        sport: athleteProfiles.sport,\n        city: athleteProfiles.city,\n      })\n      .from(athleteProfiles)\n      .innerJoin(users, eq(athleteProfiles.userId, users.id))\n      .where(eq(athleteProfiles.state, state))\n      .orderBy(desc(athleteProfiles.overallScore))\n      .limit(limit);\n  }\n\n  async getNationalLeaderboard(limit: number = 100): Promise<any[]> {\n    return await db\n      .select({\n        rank: sql<number>`ROW_NUMBER() OVER (ORDER BY ${athleteProfiles.overallScore} DESC)`,\n        athleteId: athleteProfiles.id,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        score: athleteProfiles.overallScore,\n        sport: athleteProfiles.sport,\n        state: athleteProfiles.state,\n        city: athleteProfiles.city,\n      })\n      .from(athleteProfiles)\n      .innerJoin(users, eq(athleteProfiles.userId, users.id))\n      .orderBy(desc(athleteProfiles.overallScore))\n      .limit(limit);\n  }\n\n  // Achievement operations\n  async getAllAchievements(): Promise<Achievement[]> {\n    return await db\n      .select()\n      .from(achievements)\n      .where(eq(achievements.isActive, true))\n      .orderBy(achievements.category, achievements.name);\n  }\n\n  async getUserAchievements(athleteId: string): Promise<any[]> {\n    return await db\n      .select({\n        id: userAchievements.id,\n        unlockedAt: userAchievements.unlockedAt,\n        name: achievements.name,\n        description: achievements.description,\n        icon: achievements.icon,\n        category: achievements.category,\n        points: achievements.points,\n      })\n      .from(userAchievements)\n      .innerJoin(achievements, eq(userAchievements.achievementId, achievements.id))\n      .where(eq(userAchievements.athleteId, athleteId))\n      .orderBy(desc(userAchievements.unlockedAt));\n  }\n\n  async unlockAchievement(athleteId: string, achievementId: string): Promise<UserAchievement> {\n    const [newUserAchievement] = await db\n      .insert(userAchievements)\n      .values({ athleteId, achievementId })\n      .returning();\n    return newUserAchievement;\n  }\n\n  // Analytics operations\n  async getPerformanceAnalytics(athleteId: string): Promise<any> {\n    const testResultsData = await db\n      .select({\n        testName: testTypes.name,\n        testCategory: testTypes.category,\n        value: testResults.value,\n        createdAt: testResults.createdAt,\n      })\n      .from(testResults)\n      .innerJoin(testTypes, eq(testResults.testTypeId, testTypes.id))\n      .where(eq(testResults.athleteId, athleteId))\n      .orderBy(testResults.createdAt);\n\n    // Calculate performance trends\n    const performanceByCategory = testResultsData.reduce((acc, result) => {\n      if (!acc[result.testCategory]) {\n        acc[result.testCategory] = [];\n      }\n      acc[result.testCategory].push({\n        value: parseFloat(result.value),\n        date: result.createdAt,\n      });\n      return acc;\n    }, {} as Record<string, Array<{ value: number; date: Date }>>);\n\n    return {\n      totalTests: testResultsData.length,\n      performanceByCategory,\n      recentActivity: testResultsData.slice(-10),\n    };\n  }\n\n  // Helper method to update athlete's overall score\n  private async updateAthleteOverallScore(athleteId: string): Promise<void> {\n    const avgScore = await db\n      .select({\n        avgScore: avg(testResults.value),\n      })\n      .from(testResults)\n      .where(eq(testResults.athleteId, athleteId));\n\n    if (avgScore[0]?.avgScore) {\n      await db\n        .update(athleteProfiles)\n        .set({\n          overallScore: avgScore[0].avgScore,\n          updatedAt: new Date(),\n        })\n        .where(eq(athleteProfiles.id, athleteId));\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":9060},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  decimal,\n  boolean,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (required for Replit Auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Athlete profiles extending user data\nexport const athleteProfiles = pgTable(\"athlete_profiles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  age: integer(\"age\"),\n  sport: varchar(\"sport\"),\n  position: varchar(\"position\"),\n  height: decimal(\"height\", { precision: 5, scale: 2 }), // in inches\n  weight: decimal(\"weight\", { precision: 5, scale: 2 }), // in pounds\n  state: varchar(\"state\"),\n  city: varchar(\"city\"),\n  school: varchar(\"school\"),\n  overallScore: decimal(\"overall_score\", { precision: 5, scale: 2 }).default(\"0\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Fitness test types\nexport const testTypes = pgTable(\"test_types\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  unit: varchar(\"unit\").notNull(), // seconds, inches, reps, etc.\n  category: varchar(\"category\").notNull(), // speed, strength, agility, etc.\n  instructions: text(\"instructions\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Test results\nexport const testResults = pgTable(\"test_results\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  athleteId: varchar(\"athlete_id\").notNull().references(() => athleteProfiles.id, { onDelete: \"cascade\" }),\n  testTypeId: varchar(\"test_type_id\").notNull().references(() => testTypes.id, { onDelete: \"cascade\" }),\n  value: decimal(\"value\", { precision: 10, scale: 3 }).notNull(),\n  notes: text(\"notes\"),\n  videoUrl: varchar(\"video_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Achievements\nexport const achievements = pgTable(\"achievements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  icon: varchar(\"icon\").notNull(),\n  category: varchar(\"category\").notNull(),\n  requirement: text(\"requirement\"),\n  points: integer(\"points\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User achievements (unlocked achievements)\nexport const userAchievements = pgTable(\"user_achievements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  athleteId: varchar(\"athlete_id\").notNull().references(() => athleteProfiles.id, { onDelete: \"cascade\" }),\n  achievementId: varchar(\"achievement_id\").notNull().references(() => achievements.id, { onDelete: \"cascade\" }),\n  unlockedAt: timestamp(\"unlocked_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ one }) => ({\n  athleteProfile: one(athleteProfiles, {\n    fields: [users.id],\n    references: [athleteProfiles.userId],\n  }),\n}));\n\nexport const athleteProfilesRelations = relations(athleteProfiles, ({ one, many }) => ({\n  user: one(users, {\n    fields: [athleteProfiles.userId],\n    references: [users.id],\n  }),\n  testResults: many(testResults),\n  userAchievements: many(userAchievements),\n}));\n\nexport const testTypesRelations = relations(testTypes, ({ many }) => ({\n  testResults: many(testResults),\n}));\n\nexport const testResultsRelations = relations(testResults, ({ one }) => ({\n  athlete: one(athleteProfiles, {\n    fields: [testResults.athleteId],\n    references: [athleteProfiles.id],\n  }),\n  testType: one(testTypes, {\n    fields: [testResults.testTypeId],\n    references: [testTypes.id],\n  }),\n}));\n\nexport const achievementsRelations = relations(achievements, ({ many }) => ({\n  userAchievements: many(userAchievements),\n}));\n\nexport const userAchievementsRelations = relations(userAchievements, ({ one }) => ({\n  athlete: one(athleteProfiles, {\n    fields: [userAchievements.athleteId],\n    references: [athleteProfiles.id],\n  }),\n  achievement: one(achievements, {\n    fields: [userAchievements.achievementId],\n    references: [achievements.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertAthleteProfileSchema = createInsertSchema(athleteProfiles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTestResultSchema = createInsertSchema(testResults).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTestTypeSchema = createInsertSchema(testTypes).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type AthleteProfile = typeof athleteProfiles.$inferSelect;\nexport type InsertAthleteProfile = z.infer<typeof insertAthleteProfileSchema>;\nexport type TestType = typeof testTypes.$inferSelect;\nexport type InsertTestType = z.infer<typeof insertTestTypeSchema>;\nexport type TestResult = typeof testResults.$inferSelect;\nexport type InsertTestResult = z.infer<typeof insertTestResultSchema>;\nexport type Achievement = typeof achievements.$inferSelect;\nexport type UserAchievement = typeof userAchievements.$inferSelect;\n","size_bytes":6028},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Tests from \"@/pages/tests\";\nimport Leaderboards from \"@/pages/leaderboards\";\nimport Analytics from \"@/pages/analytics\";\nimport Profile from \"@/pages/profile\";\nimport MobileNav from \"@/components/navigation/mobile-nav\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Switch>\n        {isLoading || !isAuthenticated ? (\n          <Route path=\"/\" component={Landing} />\n        ) : (\n          <>\n            <Route path=\"/\" component={Dashboard} />\n            <Route path=\"/tests\" component={Tests} />\n            <Route path=\"/leaderboards\" component={Leaderboards} />\n            <Route path=\"/analytics\" component={Analytics} />\n            <Route path=\"/profile\" component={Profile} />\n          </>\n        )}\n        <Route component={NotFound} />\n      </Switch>\n      {isAuthenticated && !isLoading && <MobileNav />}\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1588},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(220, 13%, 9%);\n  --foreground: hsl(220, 9%, 97%);\n  --card: hsl(220, 13%, 11%);\n  --card-foreground: hsl(220, 9%, 97%);\n  --popover: hsl(220, 13%, 11%);\n  --popover-foreground: hsl(220, 9%, 97%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(220, 9%, 97%);\n  --secondary: hsl(0, 63%, 31%);\n  --secondary-foreground: hsl(220, 9%, 97%);\n  --muted: hsl(220, 13%, 15%);\n  --muted-foreground: hsl(220, 9%, 65%);\n  --accent: hsl(187, 85%, 43%);\n  --accent-foreground: hsl(220, 9%, 97%);\n  --destructive: hsl(0, 63%, 31%);\n  --destructive-foreground: hsl(220, 9%, 97%);\n  --border: hsl(220, 13%, 20%);\n  --input: hsl(220, 13%, 15%);\n  --ring: hsl(221, 83%, 53%);\n  --chart-1: hsl(221, 83%, 53%);\n  --chart-2: hsl(187, 85%, 43%);\n  --chart-3: hsl(0, 63%, 31%);\n  --chart-4: hsl(60, 100%, 50%);\n  --chart-5: hsl(120, 100%, 40%);\n  --sidebar: hsl(220, 13%, 11%);\n  --sidebar-foreground: hsl(220, 9%, 97%);\n  --sidebar-primary: hsl(221, 83%, 53%);\n  --sidebar-primary-foreground: hsl(220, 9%, 97%);\n  --sidebar-accent: hsl(187, 85%, 43%);\n  --sidebar-accent-foreground: hsl(220, 9%, 97%);\n  --sidebar-border: hsl(220, 13%, 20%);\n  --sidebar-ring: hsl(221, 83%, 53%);\n  --font-sans: \"Inter\", sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(221, 83%, 53% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(221, 83%, 53% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(221, 83%, 53% / 0.00), 0px 1px 2px -1px hsl(221, 83%, 53% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(221, 83%, 53% / 0.00), 0px 1px 2px -1px hsl(221, 83%, 53% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(221, 83%, 53% / 0.00), 0px 2px 4px -1px hsl(221, 83%, 53% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(221, 83%, 53% / 0.00), 0px 4px 6px -1px hsl(221, 83%, 53% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(221, 83%, 53% / 0.00), 0px 8px 10px -1px hsl(221, 83%, 53% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(221, 83%, 53% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.light {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(220, 13%, 9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(220, 13%, 9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(220, 13%, 9%);\n  --primary: hsl(221, 83%, 53%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(0, 63%, 31%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(220, 9%, 95%);\n  --muted-foreground: hsl(220, 9%, 35%);\n  --accent: hsl(187, 85%, 43%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 63%, 31%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(220, 9%, 90%);\n  --input: hsl(220, 9%, 95%);\n  --ring: hsl(221, 83%, 53%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer components {\n  .gradient-border {\n    background: linear-gradient(135deg, var(--primary), var(--accent));\n    padding: 2px;\n    border-radius: var(--radius);\n  }\n  \n  .gradient-border > div {\n    background: var(--card);\n    border-radius: calc(var(--radius) - 2px);\n  }\n\n  .achievement-glow {\n    box-shadow: 0 0 20px rgba(6, 182, 212, 0.3);\n  }\n\n  .progress-ring {\n    transform: rotate(-90deg);\n  }\n\n  .mobile-nav-item {\n    transition: all 0.2s ease;\n  }\n\n  .mobile-nav-item:hover {\n    transform: translateY(-2px);\n  }\n\n  .test-card:hover {\n    transform: translateY(-4px);\n    transition: transform 0.3s ease;\n  }\n\n  .chart-container {\n    background: linear-gradient(135deg, rgba(30, 64, 175, 0.1), rgba(6, 182, 212, 0.1));\n  }\n}\n","size_bytes":3787},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/analytics.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { BarChart3, TrendingUp, Calendar, Target, Activity, Zap } from \"lucide-react\";\nimport PerformanceChart from \"@/components/ui/performance-chart\";\n\nexport default function Analytics() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: analytics, isLoading: analyticsLoading } = useQuery({\n    queryKey: [\"/api/analytics\"],\n    retry: false,\n  });\n\n  const { data: testResults = [], isLoading: resultsLoading } = useQuery({\n    queryKey: [\"/api/test-results\"],\n    retry: false,\n  });\n\n  const getCategoryIcon = (category: string) => {\n    switch (category.toLowerCase()) {\n      case 'speed':\n        return Zap;\n      case 'strength':\n        return Target;\n      case 'agility':\n        return Activity;\n      case 'endurance':\n        return TrendingUp;\n      default:\n        return BarChart3;\n    }\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category.toLowerCase()) {\n      case 'speed':\n        return 'text-primary';\n      case 'strength':\n        return 'text-secondary';\n      case 'agility':\n        return 'text-accent';\n      case 'endurance':\n        return 'text-chart-4';\n      default:\n        return 'text-muted-foreground';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background p-4\">\n        <Skeleton className=\"h-64 w-full\" />\n      </div>\n    );\n  }\n\n  const totalTests = analytics?.totalTests || 0;\n  const performanceByCategory = analytics?.performanceByCategory || {};\n  const recentActivity = analytics?.recentActivity || [];\n\n  return (\n    <div className=\"min-h-screen bg-background pb-20\">\n      {/* Header */}\n      <header className=\"sticky top-0 z-[100] bg-card border-b border-border px-4 py-4 shadow-sm\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-gradient-to-br from-primary to-accent rounded-lg flex items-center justify-center\">\n            <BarChart3 className=\"text-white\" size={16} />\n          </div>\n          <div>\n            <h1 data-testid=\"text-page-title\" className=\"text-lg font-bold\">Performance Analytics</h1>\n            <p className=\"text-sm text-muted-foreground\">Track your progress and identify trends</p>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"p-4 space-y-6\">\n        {/* Overview Stats */}\n        <section>\n          <h2 className=\"text-lg font-semibold mb-4\">Overview</h2>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <Card data-testid=\"card-total-tests\">\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"text-2xl font-bold text-primary mb-1\">{totalTests}</div>\n                <div className=\"text-sm text-muted-foreground\">Total Tests</div>\n              </CardContent>\n            </Card>\n            \n            <Card data-testid=\"card-categories-tested\">\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"text-2xl font-bold text-accent mb-1\">\n                  {Object.keys(performanceByCategory).length}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Categories</div>\n              </CardContent>\n            </Card>\n            \n            <Card data-testid=\"card-recent-activity\">\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"text-2xl font-bold text-secondary mb-1\">\n                  {recentActivity.length}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Recent Tests</div>\n              </CardContent>\n            </Card>\n            \n            <Card data-testid=\"card-improvement\">\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"text-2xl font-bold text-chart-4 mb-1\">--</div>\n                <div className=\"text-sm text-muted-foreground\">Avg Improvement</div>\n              </CardContent>\n            </Card>\n          </div>\n        </section>\n\n        {/* Performance Chart */}\n        <section>\n          <h2 className=\"text-lg font-semibold mb-4\">Performance Trends</h2>\n          {analyticsLoading ? (\n            <Skeleton className=\"h-64 w-full\" />\n          ) : (\n            <PerformanceChart data={analytics} showDetails />\n          )}\n        </section>\n\n        {/* Category Breakdown */}\n        <section>\n          <h2 className=\"text-lg font-semibold mb-4\">Performance by Category</h2>\n          \n          {analyticsLoading ? (\n            <div className=\"grid gap-4\">\n              {[1, 2, 3].map((i) => (\n                <Skeleton key={i} className=\"h-24 w-full\" />\n              ))}\n            </div>\n          ) : Object.keys(performanceByCategory).length > 0 ? (\n            <div className=\"grid gap-4\">\n              {Object.entries(performanceByCategory).map(([category, data]: [string, any]) => {\n                const IconComponent = getCategoryIcon(category);\n                const colorClass = getCategoryColor(category);\n                const testCount = data.length;\n                const avgPerformance = testCount > 0 \n                  ? (data.reduce((sum: number, item: any) => sum + item.value, 0) / testCount).toFixed(2)\n                  : \"0\";\n                \n                return (\n                  <Card key={category} data-testid={`card-category-${category}`}>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className={`w-10 h-10 bg-muted rounded-lg flex items-center justify-center`}>\n                            <IconComponent className={colorClass} size={20} />\n                          </div>\n                          <div>\n                            <h3 className=\"font-medium capitalize\">{category}</h3>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {testCount} test{testCount !== 1 ? 's' : ''} completed\n                            </p>\n                          </div>\n                        </div>\n                        \n                        <div className=\"text-right\">\n                          <div className={`text-lg font-bold ${colorClass}`}>\n                            {avgPerformance}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">Average</div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          ) : (\n            <Card data-testid=\"card-no-category-data\">\n              <CardContent className=\"p-6 text-center\">\n                <Target className=\"mx-auto mb-4 text-muted-foreground\" size={48} />\n                <h4 className=\"font-medium mb-2\">No category data yet</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Complete tests in different categories to see your performance breakdown\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </section>\n\n        {/* Recent Activity */}\n        <section>\n          <h2 className=\"text-lg font-semibold mb-4\">Recent Activity</h2>\n          \n          {resultsLoading ? (\n            <div className=\"space-y-3\">\n              {[1, 2, 3, 4, 5].map((i) => (\n                <Skeleton key={i} className=\"h-16 w-full\" />\n              ))}\n            </div>\n          ) : recentActivity.length > 0 ? (\n            <div className=\"space-y-3\">\n              {recentActivity.slice(0, 10).map((activity: any, index: number) => (\n                <Card key={index} data-testid={`card-activity-${index}`}>\n                  <CardContent className=\"p-4 flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-2 h-2 bg-primary rounded-full\"></div>\n                      <div>\n                        <h4 className=\"font-medium\">{activity.testName}</h4>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {new Date(activity.createdAt).toLocaleDateString()}\n                        </p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"text-right\">\n                      <div className=\"font-medium\">\n                        {activity.value} {activity.testUnit}\n                      </div>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {activity.testCategory}\n                      </Badge>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <Card data-testid=\"card-no-activity\">\n              <CardContent className=\"p-6 text-center\">\n                <Calendar className=\"mx-auto mb-4 text-muted-foreground\" size={48} />\n                <h4 className=\"font-medium mb-2\">No recent activity</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Start completing tests to see your activity timeline\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </section>\n\n        {/* Performance Insights */}\n        <section>\n          <h2 className=\"text-lg font-semibold mb-4\">Performance Insights</h2>\n          \n          <Card data-testid=\"card-insights\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <TrendingUp className=\"text-accent\" size={20} />\n                <span>Key Insights</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {totalTests === 0 ? (\n                  <p className=\"text-muted-foreground text-center\">\n                    Complete your first test to see personalized insights\n                  </p>\n                ) : (\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-start space-x-3\">\n                      <div className=\"w-2 h-2 bg-primary rounded-full mt-2\"></div>\n                      <div>\n                        <h4 className=\"font-medium\">Test Frequency</h4>\n                        <p className=\"text-sm text-muted-foreground\">\n                          You've completed {totalTests} test{totalTests !== 1 ? 's' : ''} so far. \n                          {totalTests < 5 && \" Try to test regularly for better progress tracking.\"}\n                        </p>\n                      </div>\n                    </div>\n                    \n                    {Object.keys(performanceByCategory).length > 0 && (\n                      <div className=\"flex items-start space-x-3\">\n                        <div className=\"w-2 h-2 bg-accent rounded-full mt-2\"></div>\n                        <div>\n                          <h4 className=\"font-medium\">Category Coverage</h4>\n                          <p className=\"text-sm text-muted-foreground\">\n                            You've tested {Object.keys(performanceByCategory).length} different categories. \n                            Consider expanding to other areas for a complete fitness profile.\n                          </p>\n                        </div>\n                      </div>\n                    )}\n                    \n                    <div className=\"flex items-start space-x-3\">\n                      <div className=\"w-2 h-2 bg-secondary rounded-full mt-2\"></div>\n                      <div>\n                        <h4 className=\"font-medium\">Consistency Tip</h4>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Regular testing helps identify trends and track improvements over time. \n                          Aim to test at least once per week.\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </section>\n      </main>\n    </div>\n  );\n}\n","size_bytes":12957},"client/src/pages/dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Zap, Trophy, Play, BarChart3, TrendingUp, Medal, Target, Clock } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport AchievementBadge from \"@/components/ui/achievement-badge\";\nimport PerformanceChart from \"@/components/ui/performance-chart\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading } = useAuth();\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: recentResults = [], isLoading: resultsLoading } = useQuery({\n    queryKey: [\"/api/test-results/recent\"],\n    retry: false,\n  });\n\n  const { data: userAchievements = [], isLoading: achievementsLoading } = useQuery({\n    queryKey: [\"/api/achievements/user\"],\n    retry: false,\n  });\n\n  const { data: analytics, isLoading: analyticsLoading } = useQuery({\n    queryKey: [\"/api/analytics\"],\n    retry: false,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background p-4\">\n        <div className=\"space-y-4\">\n          <Skeleton className=\"h-32 w-full\" />\n          <Skeleton className=\"h-48 w-full\" />\n          <Skeleton className=\"h-24 w-full\" />\n        </div>\n      </div>\n    );\n  }\n\n  const firstName = user?.firstName || \"Athlete\";\n  const totalTests = analytics?.totalTests || 0;\n  const recentAchievements = userAchievements.slice(0, 3);\n\n  return (\n    <div className=\"min-h-screen bg-background pb-20\">\n      {/* Header */}\n      <header className=\"sticky top-0 z-[100] bg-card border-b border-border px-4 py-3 shadow-sm\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-gradient-to-br from-primary to-accent rounded-lg flex items-center justify-center\">\n              <Zap className=\"text-white\" size={16} />\n            </div>\n            <div>\n              <h1 data-testid=\"text-app-title\" className=\"text-lg font-bold text-foreground\">AthletiQon</h1>\n              <p className=\"text-xs text-muted-foreground\">Elite Performance</p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Button\n              data-testid=\"button-notifications\"\n              size=\"sm\"\n              variant=\"ghost\"\n              className=\"w-10 h-10 bg-muted rounded-full p-0\"\n            >\n              <Trophy className=\"text-accent\" size={16} />\n            </Button>\n            <div className=\"w-10 h-10 rounded-full bg-gradient-to-br from-secondary to-primary flex items-center justify-center\">\n              <span className=\"text-sm font-bold text-white\">\n                {firstName.charAt(0).toUpperCase()}\n              </span>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"px-4 py-6\">\n        {/* Hero Section with Stats */}\n        <section className=\"mb-6\">\n          <div className=\"relative rounded-xl overflow-hidden mb-6 chart-container p-6\">\n            <div className=\"absolute inset-0 bg-gradient-to-r from-primary/20 to-accent/20\"></div>\n            <div className=\"relative z-10\">\n              <h2 data-testid=\"text-welcome\" className=\"text-2xl font-bold mb-2\">Welcome Back, {firstName}!</h2>\n              <p className=\"text-muted-foreground mb-4\">Ready to crush your personal records today?</p>\n              \n              {/* Quick Stats Grid */}\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div className=\"text-center\">\n                  <div data-testid=\"text-total-tests\" className=\"text-2xl font-bold text-accent\">{totalTests}</div>\n                  <div className=\"text-xs text-muted-foreground\">Tests Completed</div>\n                </div>\n                <div className=\"text-center\">\n                  <div data-testid=\"text-state-ranking\" className=\"text-2xl font-bold text-primary\">--</div>\n                  <div className=\"text-xs text-muted-foreground\">State Ranking</div>\n                </div>\n                <div className=\"text-center\">\n                  <div data-testid=\"text-achievement-count\" className=\"text-2xl font-bold text-secondary\">{userAchievements.length}</div>\n                  <div className=\"text-xs text-muted-foreground\">Achievements</div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Recent Achievement Banner */}\n          {recentAchievements.length > 0 && (\n            <div className=\"gradient-border mb-6 achievement-glow\">\n              <div className=\"p-4 flex items-center space-x-4\">\n                <div className=\"w-12 h-12 bg-gradient-to-br from-accent to-primary rounded-full flex items-center justify-center\">\n                  <Trophy className=\"text-white\" size={20} />\n                </div>\n                <div className=\"flex-1\">\n                  <h3 data-testid=\"text-recent-achievement\" className=\"font-semibold text-accent\">Recent Achievement!</h3>\n                  <p className=\"text-sm text-muted-foreground\">{recentAchievements[0].name}</p>\n                </div>\n                <Link href=\"/profile\">\n                  <Button data-testid=\"button-view-achievement\" size=\"sm\" variant=\"ghost\">\n                    <TrendingUp className=\"text-muted-foreground\" size={16} />\n                  </Button>\n                </Link>\n              </div>\n            </div>\n          )}\n        </section>\n\n        {/* Quick Actions */}\n        <section className=\"mb-6\">\n          <h3 className=\"text-lg font-semibold mb-4\">Quick Actions</h3>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <Link href=\"/tests\">\n              <Button \n                data-testid=\"button-start-test\"\n                className=\"bg-primary hover:bg-primary/90 text-primary-foreground p-4 rounded-xl flex flex-col items-center space-y-2 transition-all duration-200 transform hover:scale-105 w-full h-auto\"\n              >\n                <Play size={24} />\n                <span className=\"font-medium\">Start Test</span>\n              </Button>\n            </Link>\n            \n            <Link href=\"/analytics\">\n              <Button \n                data-testid=\"button-view-progress\"\n                className=\"bg-accent hover:bg-accent/90 text-accent-foreground p-4 rounded-xl flex flex-col items-center space-y-2 transition-all duration-200 transform hover:scale-105 w-full h-auto\"\n              >\n                <BarChart3 size={24} />\n                <span className=\"font-medium\">View Progress</span>\n              </Button>\n            </Link>\n          </div>\n        </section>\n\n        {/* Recent Test Results */}\n        <section className=\"mb-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-semibold\">Recent Tests</h3>\n            <Link href=\"/tests\">\n              <Button data-testid=\"button-view-all-tests\" variant=\"ghost\" size=\"sm\" className=\"text-accent\">\n                View All\n              </Button>\n            </Link>\n          </div>\n          \n          {resultsLoading ? (\n            <div className=\"space-y-3\">\n              {[1, 2, 3].map((i) => (\n                <Skeleton key={i} className=\"h-16 w-full\" />\n              ))}\n            </div>\n          ) : recentResults.length > 0 ? (\n            <div className=\"space-y-3\">\n              {recentResults.map((result: any, index: number) => (\n                <Card key={result.id} data-testid={`card-test-result-${index}`} className=\"test-card\">\n                  <CardContent className=\"p-4 flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-12 h-12 bg-primary/20 rounded-lg flex items-center justify-center\">\n                        <Target className=\"text-primary\" size={20} />\n                      </div>\n                      <div>\n                        <h4 className=\"font-medium\">{result.testName}</h4>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {result.value} {result.testUnit}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        {result.testCategory}\n                      </Badge>\n                      <div className=\"text-xs text-muted-foreground mt-1\">\n                        <Clock size={12} className=\"inline mr-1\" />\n                        {new Date(result.createdAt).toLocaleDateString()}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <Card data-testid=\"card-no-tests\">\n              <CardContent className=\"p-6 text-center\">\n                <Target className=\"mx-auto mb-4 text-muted-foreground\" size={48} />\n                <h4 className=\"font-medium mb-2\">No tests completed yet</h4>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Start your fitness journey by taking your first test\n                </p>\n                <Link href=\"/tests\">\n                  <Button data-testid=\"button-start-first-test\" size=\"sm\">\n                    Take Your First Test\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n          )}\n        </section>\n\n        {/* Performance Analytics Preview */}\n        <section className=\"mb-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-semibold\">Performance Overview</h3>\n            <Link href=\"/analytics\">\n              <Button data-testid=\"button-detailed-analytics\" variant=\"ghost\" size=\"sm\" className=\"text-accent\">\n                Detailed View\n              </Button>\n            </Link>\n          </div>\n          \n          {analyticsLoading ? (\n            <Skeleton className=\"h-48 w-full\" />\n          ) : (\n            <PerformanceChart data={analytics} />\n          )}\n        </section>\n\n        {/* Achievement Showcase */}\n        <section className=\"mb-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-semibold\">Recent Achievements</h3>\n            <Link href=\"/profile\">\n              <Button data-testid=\"button-view-all-achievements\" variant=\"ghost\" size=\"sm\" className=\"text-accent\">\n                View All\n              </Button>\n            </Link>\n          </div>\n          \n          {achievementsLoading ? (\n            <div className=\"flex space-x-4 overflow-x-auto pb-2\">\n              {[1, 2, 3].map((i) => (\n                <Skeleton key={i} className=\"flex-shrink-0 w-24 h-32\" />\n              ))}\n            </div>\n          ) : recentAchievements.length > 0 ? (\n            <div className=\"flex space-x-4 overflow-x-auto pb-2\">\n              {recentAchievements.map((achievement: any, index: number) => (\n                <AchievementBadge key={achievement.id} achievement={achievement} testId={`achievement-${index}`} />\n              ))}\n            </div>\n          ) : (\n            <Card data-testid=\"card-no-achievements\">\n              <CardContent className=\"p-6 text-center\">\n                <Medal className=\"mx-auto mb-4 text-muted-foreground\" size={48} />\n                <h4 className=\"font-medium mb-2\">No achievements yet</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Complete tests to unlock your first achievement\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </section>\n      </main>\n    </div>\n  );\n}\n","size_bytes":12442},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Zap, Trophy, BarChart3, Target, Users, Smartphone } from \"lucide-react\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b border-border\">\n        <div className=\"container mx-auto px-4 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-primary to-accent rounded-lg flex items-center justify-center\">\n                <Zap className=\"text-white\" size={20} />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-foreground\">AthletiQon</h1>\n                <p className=\"text-sm text-muted-foreground\">Elite Performance Tracking</p>\n              </div>\n            </div>\n            <Button \n              data-testid=\"button-login\"\n              onClick={() => window.location.href = \"/api/login\"}\n              className=\"bg-primary hover:bg-primary/90\"\n            >\n              Sign In\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"py-20 chart-container\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <div className=\"max-w-4xl mx-auto\">\n            <h2 className=\"text-4xl md:text-6xl font-bold mb-6 bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n              Elevate Your Athletic Performance\n            </h2>\n            <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n              Track, analyze, and compete with comprehensive fitness testing and performance analytics. \n              Join thousands of athletes pushing their limits with AthletiQon.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button \n                data-testid=\"button-get-started\"\n                size=\"lg\" \n                className=\"bg-primary hover:bg-primary/90\"\n                onClick={() => window.location.href = \"/api/login\"}\n              >\n                Get Started Free\n              </Button>\n              <Button \n                data-testid=\"button-learn-more\"\n                size=\"lg\" \n                variant=\"outline\" \n                className=\"border-accent text-accent hover:bg-accent/10\"\n              >\n                Learn More\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Grid */}\n      <section className=\"py-20\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h3 className=\"text-3xl font-bold mb-4\">Comprehensive Fitness Tracking</h3>\n            <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n              Everything you need to track, analyze, and improve your athletic performance\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            <Card data-testid=\"card-feature-tests\" className=\"bg-card border-border hover:border-primary/50 transition-colors\">\n              <CardContent className=\"p-6\">\n                <div className=\"w-12 h-12 bg-primary/20 rounded-lg flex items-center justify-center mb-4\">\n                  <Target className=\"text-primary\" size={24} />\n                </div>\n                <h4 className=\"text-xl font-semibold mb-2\">Fitness Test Suite</h4>\n                <p className=\"text-muted-foreground\">\n                  Comprehensive testing including vertical jump, 40-yard dash, push-ups, sit-ups, and more\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-feature-leaderboards\" className=\"bg-card border-border hover:border-accent/50 transition-colors\">\n              <CardContent className=\"p-6\">\n                <div className=\"w-12 h-12 bg-accent/20 rounded-lg flex items-center justify-center mb-4\">\n                  <Trophy className=\"text-accent\" size={24} />\n                </div>\n                <h4 className=\"text-xl font-semibold mb-2\">Smart Leaderboards</h4>\n                <p className=\"text-muted-foreground\">\n                  State and national rankings with age group and sport filtering\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-feature-analytics\" className=\"bg-card border-border hover:border-secondary/50 transition-colors\">\n              <CardContent className=\"p-6\">\n                <div className=\"w-12 h-12 bg-secondary/20 rounded-lg flex items-center justify-center mb-4\">\n                  <BarChart3 className=\"text-secondary\" size={24} />\n                </div>\n                <h4 className=\"text-xl font-semibold mb-2\">Performance Analytics</h4>\n                <p className=\"text-muted-foreground\">\n                  Detailed progress tracking with visual charts and performance insights\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-feature-achievements\" className=\"bg-card border-border hover:border-primary/50 transition-colors\">\n              <CardContent className=\"p-6\">\n                <div className=\"w-12 h-12 bg-primary/20 rounded-lg flex items-center justify-center mb-4\">\n                  <Zap className=\"text-primary\" size={24} />\n                </div>\n                <h4 className=\"text-xl font-semibold mb-2\">Achievement System</h4>\n                <p className=\"text-muted-foreground\">\n                  Badges and milestones to motivate and track your athletic journey\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-feature-community\" className=\"bg-card border-border hover:border-accent/50 transition-colors\">\n              <CardContent className=\"p-6\">\n                <div className=\"w-12 h-12 bg-accent/20 rounded-lg flex items-center justify-center mb-4\">\n                  <Users className=\"text-accent\" size={24} />\n                </div>\n                <h4 className=\"text-xl font-semibold mb-2\">Athlete Community</h4>\n                <p className=\"text-muted-foreground\">\n                  Connect with athletes nationwide and compete on global leaderboards\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-feature-mobile\" className=\"bg-card border-border hover:border-secondary/50 transition-colors\">\n              <CardContent className=\"p-6\">\n                <div className=\"w-12 h-12 bg-secondary/20 rounded-lg flex items-center justify-center mb-4\">\n                  <Smartphone className=\"text-secondary\" size={24} />\n                </div>\n                <h4 className=\"text-xl font-semibold mb-2\">Mobile-First PWA</h4>\n                <p className=\"text-muted-foreground\">\n                  Works like a native app with offline capabilities and instant loading\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 chart-container\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <div className=\"max-w-2xl mx-auto\">\n            <h3 className=\"text-3xl font-bold mb-4\">Ready to Track Your Performance?</h3>\n            <p className=\"text-muted-foreground mb-8\">\n              Join elite athletes using AthletiQon to reach their peak performance\n            </p>\n            <Button \n              data-testid=\"button-join-now\"\n              size=\"lg\" \n              className=\"bg-accent hover:bg-accent/90\"\n              onClick={() => window.location.href = \"/api/login\"}\n            >\n              Join AthletiQon Today\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"border-t border-border py-8\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <p className=\"text-muted-foreground\">\n            © 2024 AthletiQon. Elite Performance Tracking Platform.\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":8304},"client/src/pages/leaderboards.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Trophy, Crown, Medal, Star, Globe, MapPin } from \"lucide-react\";\n\nexport default function Leaderboards() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const [selectedState, setSelectedState] = useState(\"CA\"); // Default to California\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: stateLeaderboard = [], isLoading: stateLoading } = useQuery({\n    queryKey: [\"/api/leaderboards/state\", selectedState],\n    retry: false,\n  });\n\n  const { data: nationalLeaderboard = [], isLoading: nationalLoading } = useQuery({\n    queryKey: [\"/api/leaderboards/national\"],\n    retry: false,\n  });\n\n  const getRankIcon = (rank: number) => {\n    switch (rank) {\n      case 1:\n        return <Crown className=\"text-yellow-500\" size={20} />;\n      case 2:\n        return <Medal className=\"text-gray-400\" size={20} />;\n      case 3:\n        return <Medal className=\"text-amber-600\" size={20} />;\n      default:\n        return <Star className=\"text-muted-foreground\" size={16} />;\n    }\n  };\n\n  const getRankStyle = (rank: number, isCurrentUser: boolean = false) => {\n    if (isCurrentUser) {\n      return \"bg-accent/10 border border-accent/20\";\n    }\n    \n    switch (rank) {\n      case 1:\n        return \"bg-yellow-500/10 border border-yellow-500/20\";\n      case 2:\n        return \"bg-gray-400/10 border border-gray-400/20\";\n      case 3:\n        return \"bg-amber-600/10 border border-amber-600/20\";\n      default:\n        return \"bg-muted/50\";\n    }\n  };\n\n  const LeaderboardList = ({ data, loading, type }: { data: any[], loading: boolean, type: 'state' | 'national' }) => {\n    if (loading) {\n      return (\n        <div className=\"space-y-3\">\n          {[1, 2, 3, 4, 5].map((i) => (\n            <Skeleton key={i} className=\"h-16 w-full\" />\n          ))}\n        </div>\n      );\n    }\n\n    if (data.length === 0) {\n      return (\n        <Card data-testid={`card-no-${type}-data`}>\n          <CardContent className=\"p-6 text-center\">\n            <Trophy className=\"mx-auto mb-4 text-muted-foreground\" size={48} />\n            <h4 className=\"font-medium mb-2\">No leaderboard data yet</h4>\n            <p className=\"text-sm text-muted-foreground\">\n              Be the first to complete tests and climb the rankings!\n            </p>\n          </CardContent>\n        </Card>\n      );\n    }\n\n    return (\n      <div className=\"space-y-3\">\n        {data.map((entry: any, index: number) => {\n          const isCurrentUser = user?.athleteProfile?.id === entry.athleteId;\n          \n          return (\n            <Card\n              key={entry.athleteId}\n              data-testid={`card-leaderboard-entry-${index}`}\n              className={getRankStyle(entry.rank, isCurrentUser)}\n            >\n              <CardContent className=\"p-4 flex items-center justify-between\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    {getRankIcon(entry.rank)}\n                    <div className=\"w-8 h-8 bg-gradient-to-br from-primary to-accent rounded-full flex items-center justify-center text-sm font-bold text-white\">\n                      {entry.rank}\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <h4 className=\"font-medium flex items-center space-x-2\">\n                      <span data-testid={`text-athlete-name-${index}`}>\n                        {entry.firstName} {entry.lastName}\n                      </span>\n                      {isCurrentUser && (\n                        <Badge variant=\"secondary\" className=\"text-xs\">You</Badge>\n                      )}\n                    </h4>\n                    <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                      {entry.sport && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {entry.sport}\n                        </Badge>\n                      )}\n                      {type === 'national' && entry.state && (\n                        <span className=\"flex items-center space-x-1\">\n                          <MapPin size={12} />\n                          <span>{entry.state}</span>\n                        </span>\n                      )}\n                      {entry.city && (\n                        <span>{entry.city}</span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"text-right\">\n                  <div data-testid={`text-score-${index}`} className=\"text-lg font-bold text-accent\">\n                    {parseFloat(entry.score).toFixed(1)}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">Overall Score</div>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background p-4\">\n        <Skeleton className=\"h-64 w-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background pb-20\">\n      {/* Header */}\n      <header className=\"sticky top-0 z-[100] bg-card border-b border-border px-4 py-4 shadow-sm\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-gradient-to-br from-primary to-accent rounded-lg flex items-center justify-center\">\n            <Trophy className=\"text-white\" size={16} />\n          </div>\n          <div>\n            <h1 data-testid=\"text-page-title\" className=\"text-lg font-bold\">Leaderboards</h1>\n            <p className=\"text-sm text-muted-foreground\">See how you rank against other athletes</p>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"p-4\">\n        <Tabs defaultValue=\"state\" className=\"space-y-6\">\n          <TabsList data-testid=\"tabs-leaderboard\" className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"state\" className=\"flex items-center space-x-2\">\n              <MapPin size={16} />\n              <span>State Rankings</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"national\" className=\"flex items-center space-x-2\">\n              <Globe size={16} />\n              <span>National Rankings</span>\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"state\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span className=\"flex items-center space-x-2\">\n                    <MapPin className=\"text-primary\" size={20} />\n                    <span>California Rankings</span>\n                  </span>\n                  <Badge variant=\"outline\">{stateLeaderboard.length} Athletes</Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <LeaderboardList data={stateLeaderboard} loading={stateLoading} type=\"state\" />\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"national\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span className=\"flex items-center space-x-2\">\n                    <Globe className=\"text-accent\" size={20} />\n                    <span>National Rankings</span>\n                  </span>\n                  <Badge variant=\"outline\">{nationalLeaderboard.length} Athletes</Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <LeaderboardList data={nationalLeaderboard} loading={nationalLoading} type=\"national\" />\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n\n        {/* Performance Tips */}\n        <Card className=\"mt-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Star className=\"text-accent\" size={20} />\n              <span>Climb the Rankings</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"w-2 h-2 bg-primary rounded-full mt-2\"></div>\n                <div>\n                  <h4 className=\"font-medium\">Consistency is Key</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Regular testing and improvement across all categories boosts your overall score\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"w-2 h-2 bg-accent rounded-full mt-2\"></div>\n                <div>\n                  <h4 className=\"font-medium\">Focus on Weaknesses</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Identify your lowest-performing test categories and target improvement\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"w-2 h-2 bg-secondary rounded-full mt-2\"></div>\n                <div>\n                  <h4 className=\"font-medium\">Track Progress</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Use the analytics page to monitor your improvement trends over time\n                  </p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}\n","size_bytes":10513},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { User, Edit, Trophy, LogOut, Save, MapPin, Calendar, Award } from \"lucide-react\";\nimport AchievementBadge from \"@/components/ui/achievement-badge\";\n\nexport default function Profile() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n  \n  const [isEditing, setIsEditing] = useState(false);\n  const [formData, setFormData] = useState({\n    age: \"\",\n    sport: \"\",\n    position: \"\",\n    height: \"\",\n    weight: \"\",\n    state: \"\",\n    city: \"\",\n    school: \"\",\n  });\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: athleteProfile, isLoading: profileLoading } = useQuery({\n    queryKey: [\"/api/athlete-profile\"],\n    retry: false,\n  });\n\n  const { data: userAchievements = [], isLoading: achievementsLoading } = useQuery({\n    queryKey: [\"/api/achievements/user\"],\n    retry: false,\n  });\n\n  // Update form data when profile loads\n  useEffect(() => {\n    if (athleteProfile) {\n      setFormData({\n        age: athleteProfile.age?.toString() || \"\",\n        sport: athleteProfile.sport || \"\",\n        position: athleteProfile.position || \"\",\n        height: athleteProfile.height || \"\",\n        weight: athleteProfile.weight || \"\",\n        state: athleteProfile.state || \"\",\n        city: athleteProfile.city || \"\",\n        school: athleteProfile.school || \"\",\n      });\n    }\n  }, [athleteProfile]);\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/athlete-profile\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Profile Updated\",\n        description: \"Your athlete profile has been updated successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/athlete-profile\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      setIsEditing(false);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update profile. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = () => {\n    const profileData = {\n      ...formData,\n      age: formData.age ? parseInt(formData.age) : null,\n      height: formData.height ? parseFloat(formData.height) : null,\n      weight: formData.weight ? parseFloat(formData.weight) : null,\n    };\n\n    updateProfileMutation.mutate(profileData);\n  };\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background p-4\">\n        <Skeleton className=\"h-64 w-full\" />\n      </div>\n    );\n  }\n\n  const firstName = user?.firstName || \"\";\n  const lastName = user?.lastName || \"\";\n  const email = user?.email || \"\";\n  const profileImageUrl = user?.profileImageUrl;\n\n  return (\n    <div className=\"min-h-screen bg-background pb-20\">\n      {/* Header */}\n      <header className=\"sticky top-0 z-[100] bg-card border-b border-border px-4 py-4 shadow-sm\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-gradient-to-br from-primary to-accent rounded-lg flex items-center justify-center\">\n              <User className=\"text-white\" size={16} />\n            </div>\n            <div>\n              <h1 data-testid=\"text-page-title\" className=\"text-lg font-bold\">Profile</h1>\n              <p className=\"text-sm text-muted-foreground\">Manage your athlete profile</p>\n            </div>\n          </div>\n          \n          <Button\n            data-testid=\"button-logout\"\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleLogout}\n            className=\"text-destructive border-destructive hover:bg-destructive/10\"\n          >\n            <LogOut size={16} />\n          </Button>\n        </div>\n      </header>\n\n      <main className=\"p-4 space-y-6\">\n        {/* User Info */}\n        <Card data-testid=\"card-user-info\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>Account Information</span>\n              <Dialog open={isEditing} onOpenChange={setIsEditing}>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-edit-profile\" size=\"sm\" variant=\"outline\">\n                    <Edit size={16} className=\"mr-2\" />\n                    Edit Profile\n                  </Button>\n                </DialogTrigger>\n                <DialogContent data-testid=\"dialog-edit-profile\" className=\"sm:max-w-md max-h-screen overflow-y-auto\">\n                  <DialogHeader>\n                    <DialogTitle>Edit Athlete Profile</DialogTitle>\n                  </DialogHeader>\n                  \n                  <div className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"age\">Age</Label>\n                        <Input\n                          id=\"age\"\n                          data-testid=\"input-age\"\n                          type=\"number\"\n                          placeholder=\"Age\"\n                          value={formData.age}\n                          onChange={(e) => setFormData({ ...formData, age: e.target.value })}\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"sport\">Sport</Label>\n                        <Select\n                          value={formData.sport}\n                          onValueChange={(value) => setFormData({ ...formData, sport: value })}\n                        >\n                          <SelectTrigger data-testid=\"select-sport\">\n                            <SelectValue placeholder=\"Select sport\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"football\">Football</SelectItem>\n                            <SelectItem value=\"basketball\">Basketball</SelectItem>\n                            <SelectItem value=\"soccer\">Soccer</SelectItem>\n                            <SelectItem value=\"baseball\">Baseball</SelectItem>\n                            <SelectItem value=\"track\">Track & Field</SelectItem>\n                            <SelectItem value=\"tennis\">Tennis</SelectItem>\n                            <SelectItem value=\"swimming\">Swimming</SelectItem>\n                            <SelectItem value=\"volleyball\">Volleyball</SelectItem>\n                            <SelectItem value=\"wrestling\">Wrestling</SelectItem>\n                            <SelectItem value=\"other\">Other</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"position\">Position</Label>\n                      <Input\n                        id=\"position\"\n                        data-testid=\"input-position\"\n                        placeholder=\"Position/Role\"\n                        value={formData.position}\n                        onChange={(e) => setFormData({ ...formData, position: e.target.value })}\n                      />\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"height\">Height (inches)</Label>\n                        <Input\n                          id=\"height\"\n                          data-testid=\"input-height\"\n                          type=\"number\"\n                          step=\"0.5\"\n                          placeholder=\"Height\"\n                          value={formData.height}\n                          onChange={(e) => setFormData({ ...formData, height: e.target.value })}\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"weight\">Weight (lbs)</Label>\n                        <Input\n                          id=\"weight\"\n                          data-testid=\"input-weight\"\n                          type=\"number\"\n                          step=\"0.5\"\n                          placeholder=\"Weight\"\n                          value={formData.weight}\n                          onChange={(e) => setFormData({ ...formData, weight: e.target.value })}\n                        />\n                      </div>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"state\">State</Label>\n                        <Select\n                          value={formData.state}\n                          onValueChange={(value) => setFormData({ ...formData, state: value })}\n                        >\n                          <SelectTrigger data-testid=\"select-state\">\n                            <SelectValue placeholder=\"Select state\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"CA\">California</SelectItem>\n                            <SelectItem value=\"TX\">Texas</SelectItem>\n                            <SelectItem value=\"FL\">Florida</SelectItem>\n                            <SelectItem value=\"NY\">New York</SelectItem>\n                            <SelectItem value=\"PA\">Pennsylvania</SelectItem>\n                            <SelectItem value=\"IL\">Illinois</SelectItem>\n                            <SelectItem value=\"OH\">Ohio</SelectItem>\n                            <SelectItem value=\"GA\">Georgia</SelectItem>\n                            <SelectItem value=\"NC\">North Carolina</SelectItem>\n                            <SelectItem value=\"MI\">Michigan</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"city\">City</Label>\n                        <Input\n                          id=\"city\"\n                          data-testid=\"input-city\"\n                          placeholder=\"City\"\n                          value={formData.city}\n                          onChange={(e) => setFormData({ ...formData, city: e.target.value })}\n                        />\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"school\">School</Label>\n                      <Input\n                        id=\"school\"\n                        data-testid=\"input-school\"\n                        placeholder=\"School/Organization\"\n                        value={formData.school}\n                        onChange={(e) => setFormData({ ...formData, school: e.target.value })}\n                      />\n                    </div>\n                    \n                    <div className=\"flex space-x-2\">\n                      <Button\n                        data-testid=\"button-cancel-edit\"\n                        variant=\"outline\"\n                        onClick={() => setIsEditing(false)}\n                        className=\"flex-1\"\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        data-testid=\"button-save-profile\"\n                        onClick={handleSubmit}\n                        disabled={updateProfileMutation.isPending}\n                        className=\"flex-1\"\n                      >\n                        {updateProfileMutation.isPending ? (\n                          <div className=\"flex items-center space-x-2\">\n                            <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n                            <span>Saving...</span>\n                          </div>\n                        ) : (\n                          <div className=\"flex items-center space-x-2\">\n                            <Save size={16} />\n                            <span>Save</span>\n                          </div>\n                        )}\n                      </Button>\n                    </div>\n                  </div>\n                </DialogContent>\n              </Dialog>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center space-x-4 mb-6\">\n              {profileImageUrl ? (\n                <img\n                  src={profileImageUrl}\n                  alt=\"Profile\"\n                  className=\"w-16 h-16 rounded-full object-cover\"\n                />\n              ) : (\n                <div className=\"w-16 h-16 rounded-full bg-gradient-to-br from-primary to-accent flex items-center justify-center text-2xl font-bold text-white\">\n                  {firstName.charAt(0).toUpperCase()}\n                </div>\n              )}\n              <div>\n                <h3 data-testid=\"text-user-name\" className=\"text-xl font-semibold\">\n                  {firstName} {lastName}\n                </h3>\n                <p data-testid=\"text-user-email\" className=\"text-muted-foreground\">{email}</p>\n              </div>\n            </div>\n\n            {profileLoading ? (\n              <div className=\"space-y-3\">\n                {[1, 2, 3].map((i) => (\n                  <Skeleton key={i} className=\"h-12 w-full\" />\n                ))}\n              </div>\n            ) : athleteProfile ? (\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-sm text-muted-foreground\">Age</Label>\n                  <p data-testid=\"text-age\" className=\"font-medium\">{athleteProfile.age || \"Not set\"}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm text-muted-foreground\">Sport</Label>\n                  <p data-testid=\"text-sport\" className=\"font-medium capitalize\">{athleteProfile.sport || \"Not set\"}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm text-muted-foreground\">Position</Label>\n                  <p data-testid=\"text-position\" className=\"font-medium\">{athleteProfile.position || \"Not set\"}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm text-muted-foreground\">Overall Score</Label>\n                  <p data-testid=\"text-overall-score\" className=\"font-medium text-accent\">\n                    {athleteProfile.overallScore ? parseFloat(athleteProfile.overallScore).toFixed(1) : \"--\"}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-sm text-muted-foreground\">Height</Label>\n                  <p data-testid=\"text-height\" className=\"font-medium\">\n                    {athleteProfile.height ? `${athleteProfile.height}\"` : \"Not set\"}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-sm text-muted-foreground\">Weight</Label>\n                  <p data-testid=\"text-weight\" className=\"font-medium\">\n                    {athleteProfile.weight ? `${athleteProfile.weight} lbs` : \"Not set\"}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-sm text-muted-foreground\">Location</Label>\n                  <p data-testid=\"text-location\" className=\"font-medium flex items-center space-x-1\">\n                    <MapPin size={14} />\n                    <span>\n                      {athleteProfile.city && athleteProfile.state \n                        ? `${athleteProfile.city}, ${athleteProfile.state}`\n                        : \"Not set\"}\n                    </span>\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-sm text-muted-foreground\">School</Label>\n                  <p data-testid=\"text-school\" className=\"font-medium\">{athleteProfile.school || \"Not set\"}</p>\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center py-6\">\n                <p className=\"text-muted-foreground mb-4\">\n                  Complete your athlete profile to track your performance and compete on leaderboards\n                </p>\n                <Button data-testid=\"button-create-profile\" onClick={() => setIsEditing(true)}>\n                  Create Athlete Profile\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Achievements */}\n        <Card data-testid=\"card-achievements\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Trophy className=\"text-accent\" size={20} />\n              <span>Achievements</span>\n              <Badge variant=\"outline\">{userAchievements.length}</Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {achievementsLoading ? (\n              <div className=\"grid grid-cols-3 gap-4\">\n                {[1, 2, 3].map((i) => (\n                  <Skeleton key={i} className=\"h-24 w-full\" />\n                ))}\n              </div>\n            ) : userAchievements.length > 0 ? (\n              <div className=\"grid grid-cols-3 sm:grid-cols-4 gap-4\">\n                {userAchievements.map((achievement: any, index: number) => (\n                  <AchievementBadge \n                    key={achievement.id} \n                    achievement={achievement} \n                    showDate\n                    testId={`profile-achievement-${index}`}\n                  />\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-6\">\n                <Award className=\"mx-auto mb-4 text-muted-foreground\" size={48} />\n                <h4 className=\"font-medium mb-2\">No achievements yet</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Complete fitness tests to unlock your first achievement!\n                </p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Account Stats */}\n        <Card data-testid=\"card-account-stats\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Calendar className=\"text-primary\" size={20} />\n              <span>Account Stats</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-muted-foreground\">Member Since</span>\n                <span data-testid=\"text-member-since\" className=\"font-medium\">\n                  {user?.createdAt ? new Date(user.createdAt).toLocaleDateString() : \"--\"}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-muted-foreground\">Profile Completed</span>\n                <span data-testid=\"text-profile-completion\" className=\"font-medium\">\n                  {athleteProfile ? \"100%\" : \"0%\"}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-muted-foreground\">Achievements Unlocked</span>\n                <span data-testid=\"text-achievements-count\" className=\"font-medium text-accent\">\n                  {userAchievements.length}\n                </span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}\n","size_bytes":21251},"client/src/pages/tests.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Target, Timer, Dumbbell, Zap, Activity, RotateCcw, Play, Save } from \"lucide-react\";\nimport TestCard from \"@/components/ui/test-card\";\n\nconst testIcons = {\n  speed: Zap,\n  strength: Dumbbell,\n  agility: RotateCcw,\n  endurance: Activity,\n  power: Target,\n  default: Timer,\n};\n\nexport default function Tests() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n  const [selectedTest, setSelectedTest] = useState<any>(null);\n  const [testValue, setTestValue] = useState(\"\");\n  const [testNotes, setTestNotes] = useState(\"\");\n  const [isTestDialogOpen, setIsTestDialogOpen] = useState(false);\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: testTypes = [], isLoading: testTypesLoading } = useQuery({\n    queryKey: [\"/api/test-types\"],\n    retry: false,\n  });\n\n  const { data: testResults = [], isLoading: resultsLoading } = useQuery({\n    queryKey: [\"/api/test-results\"],\n    retry: false,\n  });\n\n  const submitTestMutation = useMutation({\n    mutationFn: async (data: { testTypeId: string; value: number; notes?: string }) => {\n      return await apiRequest(\"POST\", \"/api/test-results\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Test Submitted\",\n        description: \"Your test result has been recorded successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/test-results\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/test-results/recent\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics\"] });\n      setIsTestDialogOpen(false);\n      setTestValue(\"\");\n      setTestNotes(\"\");\n      setSelectedTest(null);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit test result. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleTestSubmit = () => {\n    if (!selectedTest || !testValue) {\n      toast({\n        title: \"Invalid Input\",\n        description: \"Please enter a valid test result.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const numericValue = parseFloat(testValue);\n    if (isNaN(numericValue)) {\n      toast({\n        title: \"Invalid Value\",\n        description: \"Please enter a numeric value.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    submitTestMutation.mutate({\n      testTypeId: selectedTest.id,\n      value: numericValue,\n      notes: testNotes.trim() || undefined,\n    });\n  };\n\n  const groupedTests = testTypes.reduce((acc: any, test: any) => {\n    if (!acc[test.category]) {\n      acc[test.category] = [];\n    }\n    acc[test.category].push(test);\n    return acc;\n  }, {});\n\n  const getLastResult = (testTypeId: string) => {\n    return testResults\n      .filter((result: any) => result.testTypeId === testTypeId)\n      .sort((a: any, b: any) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())[0];\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background p-4\">\n        <Skeleton className=\"h-64 w-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background pb-20\">\n      {/* Header */}\n      <header className=\"sticky top-0 z-[100] bg-card border-b border-border px-4 py-4 shadow-sm\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-gradient-to-br from-primary to-accent rounded-lg flex items-center justify-center\">\n            <Target className=\"text-white\" size={16} />\n          </div>\n          <div>\n            <h1 data-testid=\"text-page-title\" className=\"text-lg font-bold\">Fitness Tests</h1>\n            <p className=\"text-sm text-muted-foreground\">Track your athletic performance</p>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"p-4\">\n        {testTypesLoading ? (\n          <div className=\"space-y-6\">\n            {[\"Speed\", \"Strength\", \"Agility\"].map((category) => (\n              <div key={category}>\n                <Skeleton className=\"h-6 w-32 mb-4\" />\n                <div className=\"grid gap-4\">\n                  {[1, 2].map((i) => (\n                    <Skeleton key={i} className=\"h-24 w-full\" />\n                  ))}\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"space-y-6\">\n            {Object.entries(groupedTests).map(([category, tests]: [string, any[]]) => {\n              const IconComponent = testIcons[category as keyof typeof testIcons] || testIcons.default;\n              \n              return (\n                <section key={category}>\n                  <div className=\"flex items-center space-x-2 mb-4\">\n                    <IconComponent className=\"text-primary\" size={20} />\n                    <h2 data-testid={`text-category-${category}`} className=\"text-xl font-semibold capitalize\">{category}</h2>\n                  </div>\n                  \n                  <div className=\"grid gap-4\">\n                    {tests.map((test) => {\n                      const lastResult = getLastResult(test.id);\n                      return (\n                        <TestCard\n                          key={test.id}\n                          test={test}\n                          lastResult={lastResult}\n                          onStartTest={() => {\n                            setSelectedTest(test);\n                            setIsTestDialogOpen(true);\n                          }}\n                          testId={`test-${test.id}`}\n                        />\n                      );\n                    })}\n                  </div>\n                </section>\n              );\n            })}\n          </div>\n        )}\n\n        {/* Test Entry Dialog */}\n        <Dialog open={isTestDialogOpen} onOpenChange={setIsTestDialogOpen}>\n          <DialogContent data-testid=\"dialog-test-entry\" className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center space-x-2\">\n                <Play className=\"text-primary\" size={20} />\n                <span>Record Test Result</span>\n              </DialogTitle>\n            </DialogHeader>\n            \n            {selectedTest && (\n              <div className=\"space-y-4\">\n                <div>\n                  <h3 data-testid=\"text-selected-test\" className=\"font-semibold text-lg\">{selectedTest.name}</h3>\n                  <p className=\"text-sm text-muted-foreground\">{selectedTest.description}</p>\n                  {selectedTest.instructions && (\n                    <div className=\"mt-2 p-3 bg-muted/50 rounded-lg\">\n                      <p className=\"text-sm\">{selectedTest.instructions}</p>\n                    </div>\n                  )}\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"test-value\">\n                    Result ({selectedTest.unit})\n                  </Label>\n                  <Input\n                    id=\"test-value\"\n                    data-testid=\"input-test-value\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    placeholder={`Enter result in ${selectedTest.unit}`}\n                    value={testValue}\n                    onChange={(e) => setTestValue(e.target.value)}\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"test-notes\">Notes (optional)</Label>\n                  <Textarea\n                    id=\"test-notes\"\n                    data-testid=\"textarea-test-notes\"\n                    placeholder=\"Add any notes about this test...\"\n                    value={testNotes}\n                    onChange={(e) => setTestNotes(e.target.value)}\n                    rows={3}\n                  />\n                </div>\n                \n                <div className=\"flex space-x-2\">\n                  <Button\n                    data-testid=\"button-cancel-test\"\n                    variant=\"outline\"\n                    onClick={() => setIsTestDialogOpen(false)}\n                    className=\"flex-1\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    data-testid=\"button-submit-test\"\n                    onClick={handleTestSubmit}\n                    disabled={submitTestMutation.isPending || !testValue}\n                    className=\"flex-1\"\n                  >\n                    {submitTestMutation.isPending ? (\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n                        <span>Saving...</span>\n                      </div>\n                    ) : (\n                      <div className=\"flex items-center space-x-2\">\n                        <Save size={16} />\n                        <span>Save Result</span>\n                      </div>\n                    )}\n                  </Button>\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n      </main>\n    </div>\n  );\n}\n","size_bytes":10746},"client/src/components/navigation/mobile-nav.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Home, Target, Trophy, BarChart3, User } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nconst navItems = [\n  {\n    path: \"/\",\n    icon: Home,\n    label: \"Home\",\n    testId: \"nav-home\",\n  },\n  {\n    path: \"/tests\",\n    icon: Target,\n    label: \"Tests\",\n    testId: \"nav-tests\",\n  },\n  {\n    path: \"/leaderboards\",\n    icon: Trophy,\n    label: \"Rankings\",\n    testId: \"nav-rankings\",\n  },\n  {\n    path: \"/analytics\",\n    icon: BarChart3,\n    label: \"Analytics\",\n    testId: \"nav-analytics\",\n  },\n  {\n    path: \"/profile\",\n    icon: User,\n    label: \"Profile\",\n    testId: \"nav-profile\",\n  },\n];\n\nexport default function MobileNav() {\n  const [location] = useLocation();\n\n  return (\n    <nav className=\"fixed bottom-0 left-0 right-0 bg-card border-t border-border px-4 py-2 z-50\">\n      <div className=\"flex justify-around\">\n        {navItems.map((item) => {\n          const IconComponent = item.icon;\n          const isActive = location === item.path;\n          \n          return (\n            <Link key={item.path} href={item.path}>\n              <button\n                data-testid={item.testId}\n                className={cn(\n                  \"mobile-nav-item flex flex-col items-center py-2 px-3 transition-colors\",\n                  isActive \n                    ? \"text-primary\" \n                    : \"text-muted-foreground hover:text-accent\"\n                )}\n              >\n                <IconComponent size={18} className=\"mb-1\" />\n                <span className=\"text-xs font-medium\">{item.label}</span>\n              </button>\n            </Link>\n          );\n        })}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":1680},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/achievement-badge.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Trophy, Medal, Star, Zap, Target, Crown, Award, Flame } from \"lucide-react\";\n\ninterface AchievementBadgeProps {\n  achievement: {\n    id: string;\n    name: string;\n    description: string;\n    icon: string;\n    category: string;\n    points?: number;\n    unlockedAt?: string;\n  };\n  showDate?: boolean;\n  testId?: string;\n}\n\nexport default function AchievementBadge({ achievement, showDate = false, testId }: AchievementBadgeProps) {\n  const getIcon = (iconName: string) => {\n    const iconMap: Record<string, any> = {\n      trophy: Trophy,\n      medal: Medal,\n      star: Star,\n      zap: Zap,\n      target: Target,\n      crown: Crown,\n      award: Award,\n      flame: Flame,\n    };\n    \n    return iconMap[iconName.toLowerCase()] || Trophy;\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category.toLowerCase()) {\n      case 'speed':\n        return 'from-primary to-accent';\n      case 'strength':\n        return 'from-secondary to-primary';\n      case 'consistency':\n        return 'from-accent to-secondary';\n      case 'milestone':\n        return 'from-chart-4 to-primary';\n      case 'ranking':\n        return 'from-primary to-secondary';\n      default:\n        return 'from-accent to-primary';\n    }\n  };\n\n  const IconComponent = getIcon(achievement.icon);\n  const gradientColor = getCategoryColor(achievement.category);\n\n  return (\n    <Card \n      data-testid={testId || `achievement-badge-${achievement.id}`}\n      className=\"flex-shrink-0 bg-card border border-border rounded-xl overflow-hidden achievement-glow hover:scale-105 transition-transform duration-200\"\n    >\n      <CardContent className=\"p-4 text-center w-24\">\n        <div className={`w-12 h-12 bg-gradient-to-br ${gradientColor} rounded-full flex items-center justify-center mx-auto mb-2`}>\n          <IconComponent className=\"text-white\" size={20} />\n        </div>\n        \n        <div className=\"space-y-1\">\n          <div data-testid={`achievement-name-${achievement.id}`} className=\"text-xs font-medium leading-tight\">\n            {achievement.name}\n          </div>\n          \n          {achievement.points && (\n            <Badge variant=\"secondary\" className=\"text-xs px-1 py-0\">\n              {achievement.points}pts\n            </Badge>\n          )}\n          \n          {showDate && achievement.unlockedAt && (\n            <div className=\"text-xs text-muted-foreground mt-1\">\n              {new Date(achievement.unlockedAt).toLocaleDateString('en-US', { \n                month: 'short', \n                day: 'numeric' \n              })}\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2745},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/performance-chart.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { BarChart3, TrendingUp, Activity } from \"lucide-react\";\n\ninterface PerformanceChartProps {\n  data: any;\n  showDetails?: boolean;\n}\n\nexport default function PerformanceChart({ data, showDetails = false }: PerformanceChartProps) {\n  if (!data || !data.performanceByCategory) {\n    return (\n      <Card data-testid=\"card-performance-chart-empty\">\n        <CardContent className=\"p-6 text-center\">\n          <BarChart3 className=\"mx-auto mb-4 text-muted-foreground\" size={48} />\n          <h4 className=\"font-medium mb-2\">No performance data yet</h4>\n          <p className=\"text-sm text-muted-foreground\">\n            Complete some tests to see your performance trends\n          </p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const categories = Object.keys(data.performanceByCategory);\n  const totalTests = data.totalTests || 0;\n\n  // Calculate overall progress trend\n  const getOverallTrend = () => {\n    if (totalTests === 0) return 0;\n    \n    let totalImprovement = 0;\n    let categoryCount = 0;\n    \n    Object.values(data.performanceByCategory).forEach((categoryData: any) => {\n      if (categoryData.length > 1) {\n        const first = categoryData[0].value;\n        const last = categoryData[categoryData.length - 1].value;\n        totalImprovement += ((last - first) / first) * 100;\n        categoryCount++;\n      }\n    });\n    \n    return categoryCount > 0 ? totalImprovement / categoryCount : 0;\n  };\n\n  const overallTrend = getOverallTrend();\n\n  return (\n    <Card data-testid=\"card-performance-chart\" className=\"chart-container\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <span className=\"flex items-center space-x-2\">\n            <BarChart3 className=\"text-primary\" size={20} />\n            <span>Performance Overview</span>\n          </span>\n          {showDetails && (\n            <Badge variant=\"outline\" className=\"text-xs\">\n              {totalTests} Tests\n            </Badge>\n          )}\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-6\">\n          {/* Overall Score Display */}\n          <div className=\"text-center py-4\">\n            <div className=\"text-3xl font-bold text-accent mb-2\" data-testid=\"text-overall-trend\">\n              {overallTrend > 0 ? '+' : ''}{overallTrend.toFixed(1)}%\n            </div>\n            <div className=\"text-sm text-muted-foreground flex items-center justify-center space-x-1\">\n              <TrendingUp className={overallTrend >= 0 ? 'text-accent' : 'text-destructive'} size={14} />\n              <span>Overall Trend</span>\n            </div>\n          </div>\n\n          {/* Category Performance Bars */}\n          {categories.length > 0 ? (\n            <div className=\"space-y-4\">\n              <h4 className=\"font-medium text-sm text-muted-foreground uppercase tracking-wide\">\n                Performance by Category\n              </h4>\n              \n              {categories.map((category, index) => {\n                const categoryData = data.performanceByCategory[category];\n                const avgValue = categoryData.reduce((sum: number, item: any) => sum + item.value, 0) / categoryData.length;\n                const maxValue = Math.max(...categories.map(cat => {\n                  const data = data.performanceByCategory[cat];\n                  return data.reduce((sum: number, item: any) => sum + item.value, 0) / data.length;\n                }));\n                const percentage = (avgValue / maxValue) * 100;\n                \n                const getBarColor = (index: number) => {\n                  const colors = ['bg-primary', 'bg-accent', 'bg-secondary', 'bg-chart-4', 'bg-chart-5'];\n                  return colors[index % colors.length];\n                };\n\n                return (\n                  <div key={category} data-testid={`performance-bar-${category}`} className=\"space-y-2\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm font-medium capitalize\">{category}</span>\n                      <span className=\"text-sm text-muted-foreground\">\n                        {avgValue.toFixed(1)} avg\n                      </span>\n                    </div>\n                    <div className=\"w-full bg-muted rounded-full h-2\">\n                      <div \n                        className={`h-2 rounded-full transition-all duration-500 ${getBarColor(index)}`}\n                        style={{ width: `${Math.max(percentage, 5)}%` }}\n                      />\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {categoryData.length} test{categoryData.length !== 1 ? 's' : ''} completed\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          ) : (\n            <div className=\"text-center py-6\">\n              <Activity className=\"mx-auto mb-2 text-muted-foreground\" size={32} />\n              <p className=\"text-sm text-muted-foreground\">\n                No category data available\n              </p>\n            </div>\n          )}\n\n          {/* Recent Activity Summary */}\n          {showDetails && data.recentActivity && data.recentActivity.length > 0 && (\n            <div className=\"border-t border-border pt-4\">\n              <h4 className=\"font-medium text-sm text-muted-foreground uppercase tracking-wide mb-3\">\n                Recent Activity\n              </h4>\n              <div className=\"grid grid-cols-6 gap-2\">\n                {data.recentActivity.slice(0, 6).map((activity: any, index: number) => (\n                  <div \n                    key={index}\n                    data-testid={`activity-dot-${index}`}\n                    className=\"h-8 bg-gradient-to-t from-primary/60 to-primary rounded\"\n                    style={{ \n                      height: `${Math.max(20 + (activity.value % 30), 20)}px`,\n                      opacity: 1 - (index * 0.1)\n                    }}\n                    title={`${activity.testName}: ${activity.value} ${activity.testUnit}`}\n                  />\n                ))}\n              </div>\n              <div className=\"flex justify-between text-xs text-muted-foreground mt-2\">\n                <span>Oldest</span>\n                <span>Most Recent</span>\n              </div>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6548},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/test-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Play, TrendingUp, TrendingDown, Minus, Clock } from \"lucide-react\";\n\ninterface TestCardProps {\n  test: {\n    id: string;\n    name: string;\n    description: string;\n    unit: string;\n    category: string;\n    instructions?: string;\n  };\n  lastResult?: {\n    id: string;\n    value: string;\n    createdAt: string;\n  };\n  onStartTest: () => void;\n  testId?: string;\n}\n\nexport default function TestCard({ test, lastResult, onStartTest, testId }: TestCardProps) {\n  const getCategoryIcon = (category: string) => {\n    switch (category.toLowerCase()) {\n      case 'speed':\n        return '⚡';\n      case 'strength':\n        return '💪';\n      case 'agility':\n        return '🔄';\n      case 'endurance':\n        return '🏃';\n      case 'power':\n        return '🎯';\n      default:\n        return '⏱️';\n    }\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category.toLowerCase()) {\n      case 'speed':\n        return 'bg-primary/20 text-primary border-primary/20';\n      case 'strength':\n        return 'bg-secondary/20 text-secondary border-secondary/20';\n      case 'agility':\n        return 'bg-accent/20 text-accent border-accent/20';\n      case 'endurance':\n        return 'bg-chart-4/20 text-chart-4 border-chart-4/20';\n      case 'power':\n        return 'bg-chart-5/20 text-chart-5 border-chart-5/20';\n      default:\n        return 'bg-muted/20 text-muted-foreground border-muted/20';\n    }\n  };\n\n  const getProgressIndicator = () => {\n    // Since we don't have historical data, we'll show a neutral state\n    return (\n      <div className=\"flex items-center space-x-1 text-muted-foreground\">\n        <Minus size={14} />\n        <span className=\"text-xs\">First test</span>\n      </div>\n    );\n  };\n\n  return (\n    <Card \n      data-testid={testId || `test-card-${test.id}`}\n      className=\"test-card border-border hover:border-primary/50 transition-all duration-200\"\n    >\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4 flex-1\">\n            <div className={`w-12 h-12 rounded-lg flex items-center justify-center text-xl ${getCategoryColor(test.category)}`}>\n              {getCategoryIcon(test.category)}\n            </div>\n            \n            <div className=\"flex-1 min-w-0\">\n              <div className=\"flex items-center space-x-2 mb-1\">\n                <h4 data-testid={`test-name-${test.id}`} className=\"font-medium truncate\">\n                  {test.name}\n                </h4>\n                <Badge \n                  variant=\"outline\" \n                  className={`text-xs ${getCategoryColor(test.category)}`}\n                >\n                  {test.category}\n                </Badge>\n              </div>\n              \n              {lastResult ? (\n                <div className=\"space-y-1\">\n                  <p data-testid={`last-result-${test.id}`} className=\"text-sm text-muted-foreground\">\n                    Last: <span className=\"font-medium text-foreground\">\n                      {parseFloat(lastResult.value).toFixed(2)} {test.unit}\n                    </span>\n                  </p>\n                  <div className=\"flex items-center space-x-2\">\n                    {getProgressIndicator()}\n                    <span className=\"text-xs text-muted-foreground flex items-center space-x-1\">\n                      <Clock size={10} />\n                      <span>{new Date(lastResult.createdAt).toLocaleDateString()}</span>\n                    </span>\n                  </div>\n                </div>\n              ) : (\n                <p className=\"text-sm text-muted-foreground\">\n                  No previous results\n                </p>\n              )}\n            </div>\n          </div>\n          \n          <Button\n            data-testid={`button-start-test-${test.id}`}\n            onClick={onStartTest}\n            size=\"sm\"\n            className=\"bg-primary hover:bg-primary/90 ml-4\"\n          >\n            <Play size={14} className=\"mr-1\" />\n            Start\n          </Button>\n        </div>\n        \n        {test.description && (\n          <div className=\"mt-3 pt-3 border-t border-border\">\n            <p className=\"text-xs text-muted-foreground\">\n              {test.description}\n            </p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4518},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}